generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          Int        @id @default(autoincrement())
  companyName String
  companyCode String     @unique
  users       User[]
  customers   Customer[]
  cars        Car[]
  contracts   Contract[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model User {
  id             Int        @id @default(autoincrement())
  name           String
  email          String     @unique
  employeeNumber String     @unique
  phoneNumber    String
  password       String
  imageUrl       String?
  isAdmin        Boolean    @default(false)
  company        Company    @relation(fields: [companyId], references: [id])
  companyId      Int
  contracts      Contract[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Customer {
  id          Int        @id @default(autoincrement())
  name        String
  gender      Gender
  phoneNumber String
  ageGroup    AgeGroup?
  region      Region?
  email       String?    @unique
  memo        String?
  company     Company    @relation(fields: [companyId], references: [id])
  companyId   Int
  contracts   Contract[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Car {
  id                Int        @id @default(autoincrement())
  carNumber         String     @unique
  manufacturingYear Int
  mileage           Int
  price             Int
  accidentCount     Int
  explanation       String?
  accidentDetails   String?
  status            CarStatus
  carModel          CarModel   @relation(fields: [model], references: [model])
  model             String
  company           Company    @relation(fields: [companyId], references: [id])
  companyId         Int
  contracts         Contract[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model CarModel {
  model        String @id
  manufacturer String
  type         String
  cars         Car[]
}

model Contract {
  id             Int                @id @default(autoincrement())
  status         ContractStatus
  resulutionDate DateTime
  contractPrice  Int
  car            Car                @relation(fields: [carId], references: [id])
  carId          Int
  customer       Customer           @relation(fields: [customerId], references: [id])
  customerId     Int
  user           User               @relation(fields: [userId], references: [id])
  userId         Int
  company        Company            @relation(fields: [companyId], references: [id])
  companyId      Int
  meetings       Meeting[]
  documents      ContractDocument[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model Meeting {
  id         Int      @id @default(autoincrement())
  date       DateTime
  alarms     String[]
  contract   Contract @relation(fields: [contractId], references: [id])
  contractId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ContractDocument {
  id         Int      @id @default(autoincrement())
  fileName   String
  contract   Contract @relation(fields: [contractId], references: [id])
  contractId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum Gender {
  male
  female
}

enum AgeGroup {
  TEEN    @map("10대")
  TWENTY  @map("20대")
  THIRTY  @map("30대")
  FORTY   @map("40대")
  FIFTY   @map("50대")
  SIXTY   @map("60대")
  SEVENTY @map("70대")
  EIGHTY  @map("80대")
}

enum Region {
  SEOUL     @map("서울")
  GYEONGGI  @map("경기")
  INCHEON   @map("인천")
  GANGWON   @map("강원")
  CHUNGBUK  @map("충북")
  CHUNGNAM  @map("충남")
  SEJONG    @map("세종")
  DAEJEON   @map("대전")
  JEONBUK   @map("전북")
  JEONNAM   @map("전남")
  GWANGJU   @map("광주")
  GYEONGBUK @map("경북")
  GYEONGNAM @map("경남")
  DAEGU     @map("대구")
  ULSAN     @map("울산")
  BUSAN     @map("부산")
  JEJU      @map("제주")
}

enum CarStatus {
  possession
  contractProceeding
  contractCompleted
}

enum ContractStatus {
  carInspection
  priceNegotiation
  contractDraft
  contractSuccessful
  contractFailed
}
